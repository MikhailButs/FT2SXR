syntax = "proto2";

package sxr_protocol;

message MainPacket{
  required fixed32 address = 1;
  required fixed32 sender = 2;
  required fixed32 command = 3;
  optional bytes data = 4;
  optional string version = 5;
}

message AdcStatus{
  optional string name = 1;
  optional bool enabled = 2 [default = false];
  optional bool connected = 3 [default = false];
  optional fixed32 sampling_rate = 4;
  optional float inter_channel_delay = 41;
  optional float inter_sample_delay = 42;
  optional fixed32 samples = 5;

  enum EnumStartSource{
    option allow_alias = true;
    SOFTSTART = 0;
    INTSTART = 0;
    EXTSTART = 1;
    IN0 = 2;
    STARTTHR = 2;
  }
  optional EnumStartSource start = 6 [default = SOFTSTART];
  optional float start_threshold = 61;
  optional bool start_inversion = 62;
  optional bytes start_mode = 63;

  optional bool is_in_periodic = 11;

  optional EnumStartSource stop = 7 [default = SOFTSTART];
  optional float stop_threshold = 71;
  optional bool stop_inversion = 72;
  optional bytes stop_mode= 73;

  enum EnumClockSource{
    CLOCKOFF = 0;
    CLOCKINT = 1;
    CLOCKEXT = 2;
  }
  optional EnumClockSource clock_source = 8 [default = CLOCKINT];

  enum EnumMemory{
    MEMHOST = 0; //PC etc.
    MEMINT = 1;  //Internal ADC Memory
    MEMFIFO = 3;
  }
  optional EnumMemory memory_type = 9;

  message BoardStatus{
    optional string name = 1;
    optional bool enabled = 2;
    optional bytes channel_mask = 3;
    optional bytes hidden_channel_mask = 5;

    message ChannelStatus{
      optional string name = 1;
      optional bool enabled = 2 [default = false];
      optional bool void = 5 [default = false];
      optional float gain = 3 [default = 1.0];
      optional float bias = 4 [default = 0.0];
    }
    repeated ChannelStatus channel_status = 4;

  }
  repeated BoardStatus board_status = 10;
  enum ConnectorsIn{
    CON_CH_1 = 1;
    CON_CH_2 = 2;
    CON_CH_3 = 3;
    CON_CH_4 = 4;
    CON_CH_5 = 5;
    CON_CH_6 = 6;
    CON_CH_7 = 7;
    CON_CH_8 = 8;
    CON_START = 9;
    CON_CLOCK = 10;
  }

}

message AmpStatus{
  required float gainA = 1 [default = 0.0]; // wheel units
  required float gainB= 2 [default = 0.0]; // wheel units
  required uint32 tail = 3 [default = 6]; // ns

  enum ConnectorsIn{
    CON_IN = 0;
  }
  enum ConnectorsOut{
    CON_CH_A = 1;
    CON_CH_B = 2;
  }
}

message HardwareStatus{
  required float angle = 1 [default = 0.0]; // degrees
  required float vknife = 2 [default = 0.0]; // mm
  required float hknife = 3 [default = 0.0]; // mm
  required string foil = 4 [default = '?'];
  required string diaphragm = 5 [default = '?'];
  optional bool shiber = 6 [default = false];
}

message JournalStatus{
  required uint32 SXRshot = 1 [default = 0];
  optional uint32 TOKAMAKshot = 2 [default = 0];
  required string filename = 3 [default = 'SXRspectrum'];
  optional string comment = 4 [default = ''];
  optional string daycomment = 5 [default = ''];
  optional string signal_source = 6 [default = ''];
  optional string work_type = 7 [default = ''];
}

message TokamakStatus{
  optional float density = 1 [default = 0]; // lines
  optional uint32 current = 2 [default = 0]; // kA
  enum EnumShot{
    OH = 0;
    RF = 1;
    GLOW = 2;
    OFF = 3;
  }
  optional EnumShot shotType = 3 [default = OH]; // mode
  optional uint32 power = 4 [default = 0]; // kW
}

message GsaStatus{
  optional float amplitude = 1 [default = 0]; // mV
  optional float edge = 2 [default = 24]; // ns
  optional float frequency = 3 [default = 626]; // Hz
}

message SystemStatus{

  enum EnumState{
    IDLE = 0;
    MEASUREMENT = 1;
    CALIBRATION = 2;
    BACKGROUND = 3;
 }
  required EnumState state = 1 [default = IDLE];

  enum EnumDev{
    option allow_alias = true;
    UNKNOWN = 0;
    ANY = 0;
    SXR = 1;
    ADC = 2;
    PX5 = 3;
    AMP = 4;
    GSA = 5;
    MINIX2 = 6;
    XRAY = 6;
    SOURCE = 6;
    FE55 = 7;
    SDD = 8;
    TOKAMAK = 9;
    JOURNAL = 10;
    HARDWARE = 11;
  }
  repeated EnumDev devs = 2;

  enum ConnectorsOut{
    CON_OUT = 0;
    CON_CON1 = 1;
    CON_CON2 = 2;
  }
  enum ConnectorsIn{
    CON_IN = 0;
    CON_CH_1 = 1;
    CON_CH_2 = 2;
    CON_CH_3 = 3;
    CON_CH_4 = 4;
    CON_CH_5 = 5;
    CON_CH_6 = 6;
    CON_CH_7 = 7;
    CON_CH_8 = 8;
    CON_START = 9;
    CON_CLOCK = 10;
  }

  repeated Bind binds = 3;

}

enum Commands{
  option allow_alias = true;
  INFO = 0;
  STATUS = 1;
  GET_STATUS = 1;
  GET = 2;
  GET_SETTINGS = 2;
  SET = 3;
  SET_STATUS = 3;
  SETTINGS = 3;
  START = 4;
  STOP = 5;
  REBOOT = 6;
  CONNECT = 7;
  SNAPSHOT = 8;
  SHUTDOWN = 9;
  DONE = 10;
}

message Source{
  required SystemStatus.EnumDev dev = 1;
  required SystemStatus.ConnectorsOut connector = 2;
}

message Receiver{
  required SystemStatus.EnumDev dev = 1;
  required SystemStatus.ConnectorsOut connector = 2;
}

message Bind{
  required Source source = 1;
  repeated Receiver receivers = 2;
}
